#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
ll INF = 1e9;
ll n, m, src, sink;

vector<vector<ll>> adj(n);
vector<vector<ll>> adj_forward(n);
vector<vector<ll>> cap(n, vector<ll>(n, 0));
vector<ll> nxt, level;

bool bfs() {
  level.assign(n, -1);  
  level[src] = 0;
  queue<ll> q({ src });

  while (!q.empty()) {
    ll v = q.front(); q.pop();
    for (ll out : adj[v]) {
      if (level[out] == -1 && cap[v][out] > 0) {
        q.push(out);
        level[out] = level[v] + 1;
      }
    }
  }
  return level[sink] != -1;
}

ll dfs(ll v, ll flow) {
  if (v == sink) {
    return flow;
  }
  for(; nxt[v] < adj[v].size(); nxt[v]++) {
    ll out = adj[v][nxt[v]];
    if (level[out] == level[v] + 1 && cap[v][out] > 0) {
      ll f = dfs(out, min(flow, cap[v][out]));
      if (f >  0) {
        cap[v][out] -= f;
        cap[out][v] += f;
        return f;
      }
    }
  }

  return 0;
}

ll dinic() {
  ll flow = 0;

  while (bfs()) {
    ll new_flow = 0;
    nxt.assign(n, 0);
    while ((new_flow = dfs(src, INF))) {
      flow += new_flow;
    }
  }
  return flow;
}

int main() {
  cin >> n >> m;

  vector<vector<ll>> adj(n);
  vector<vector<ll>> adj_forward(n);
  vector<vector<ll>> cap(n, vector<ll>(n, 0));

  for (ll i = 0; i < m; i++) {
    ll fr, to;
    cin >> fr >> to;
    fr--;
    to--;
    adj_forward[fr].push_back(to);
    // TODO: dedupe
    adj[fr].push_back(to);
    adj[to].push_back(fr);
    cap[fr][to] += 1;
  }
  src = 0; sink = n - 1;

  ll flow = dinic();
  cout << flow << endl;
  vector<ll> back;
  return 0;
  for (ll i = 0; i < flow; i++) {
    // dfs2();
    vector<ll> path;
    ll v = src; 
    while (v != sink) {
      path.push_back(v + 1);
      ll next = back[v];
      cap[next][v] = 0;
      v = next;
    }
    path.push_back(sink + 1);
    cout << path.size() << endl;
    for (auto el : path) cout << el << " " ;
    cout << endl;
  }

  return 0;
}
